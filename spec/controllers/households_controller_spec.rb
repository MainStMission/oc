 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe HouseholdsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Household. As you add validations to Household, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {household_name: "Brooke, Thomas"}
    {neighbor_id: 12}

  }

  let(:invalid_attributes) {
    {household_name: ""}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # HouseholdsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  login_user

  describe "GET #index" do
    it "exposes households" do
      neighbor = create(:neighbor)
      household = create(:household, neighbors: [neighbor])
      get :index
      controller.households.should eq([household])
    end
  end


  describe "GET #show" do
    it "exposes the requested household as household" do
    neighbor = create(:neighbor)
    household = create(:household, neighbors: [neighbor])
      get :show, {id: household.to_param}
      controller.household.should eq(household)
    end
  end

  describe "GET #new" do
    it "exposes a new household as household" do
      get :new, {}
      controller.household.should be_a_new(Household)
    end
  end

  describe "GET #edit" do
    it "exposes the requested household as household" do
      neighbor = create(:neighbor)
      household = create(:household, neighbors: [neighbor])
      get :edit, {id: household.to_param}
      controller.household.should eq(household)
    end
  end

end
